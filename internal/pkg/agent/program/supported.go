// Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
// or more contributor license agreements. Licensed under the Elastic License;
// you may not use this file except in compliance with the Elastic License.

// Code generated by elastic-agent/internals/dev-tools/buildspec/buildspec.go - DO NOT EDIT.

package program

import (
	"strings"

	"github.com/elastic/elastic-agent/internal/pkg/packer"
)

var Supported []Spec
var SupportedMap map[string]Spec

func init() {
	// Packed Files
	// internal/spec/apm-server.yml
	// internal/spec/endpoint.yml
	// internal/spec/filebeat.yml
	// internal/spec/fleet-server.yml
	// internal/spec/heartbeat.yml
	// internal/spec/metricbeat.yml
	// internal/spec/osquerybeat.yml
	// internal/spec/packetbeat.yml
	unpacked := packer.MustUnpack("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")
	SupportedMap = make(map[string]Spec)

	for f, v := range unpacked {
		s, err := NewSpecFromBytes(v)
		if err != nil {
			panic("Cannot read spec from " + f + ": " + err.Error())
		}
		Supported = append(Supported, s)
		SupportedMap[strings.ToLower(s.Cmd)] = s
	}
}
