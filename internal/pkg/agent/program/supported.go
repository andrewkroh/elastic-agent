// Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
// or more contributor license agreements. Licensed under the Elastic License;
// you may not use this file except in compliance with the Elastic License.

// Code generated by elastic-agent/internals/dev-tools/buildspec/buildspec.go - DO NOT EDIT.

package program

import (
	"strings"

	"github.com/elastic/elastic-agent/internal/pkg/packer"
)

var Supported []Spec
var SupportedMap map[string]Spec

func init() {
	// Packed Files
	// internal/spec/apm-server.yml
	// internal/spec/endpoint.yml
	// internal/spec/filebeat.yml
	// internal/spec/fleet-server.yml
	// internal/spec/heartbeat.yml
	// internal/spec/metricbeat.yml
	// internal/spec/osquerybeat.yml
	// internal/spec/packetbeat.yml
	unpacked := packer.MustUnpack("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")
	SupportedMap = make(map[string]Spec)

	for f, v := range unpacked {
		s, err := NewSpecFromBytes(v)
		if err != nil {
			panic("Cannot read spec from " + f)
		}
		Supported = append(Supported, s)
		SupportedMap[strings.ToLower(s.Cmd)] = s
	}
}
